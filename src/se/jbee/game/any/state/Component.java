package se.jbee.game.any.state;

/**
 * Components are the keys used in an {@link Entity} therefore their values have
 * to be unique.
 *
 * The meaning of each key is modeled through an entity as well. The ID of an
 * entity associated with a component can be resolved from a special mapping the
 * {@link State} keeps track of for components.
 *
 * The {@link #TYPE} component is used to group entities of the same kind
 * together. All entities that explain/are components have the special type
 * {@link #COMP} that is predefined within a {@link State} container.
 *
 * Component entities for {@link #TYPE}, {@link #ID}, {@link #NAME} and
 * {@link #CODE} are defined through the usual mechanism to ensure that their ID
 * is the also the index within the list of components.
 */
public interface Component {

	/**
	 * Holds the mapping of component types to the entity that defines the
	 * component of that type
	 */
	int COMP = 0;
	/**
	 * Each entity created has a "type" that is given by referring to another
	 * entity. This way groups of entities of the same type or kind are
	 * created. Entities that describe components (attributes of entities) are
	 * such a group. All other are user defined.
	 */
	int TYPE = 1;
	/**
	 * A entities ID (unique within the same state container).
	 *
	 * When a new entity is declared the state container assigns an ID to the
	 * entity. This ID is stored and accessible though the {@link #ID} component
	 * of the entity.
	 */
	int ID   = 2;
	/**
	 * A human readable name (unique among all of the same type).
	 *
	 * This is typically used for dynamic names of entities. Those generated by
	 * the game or entered by the player. Names that come from game data most
	 * likely use {@link #CODE} instead. A good way to tell if name or code
	 * should be used is to ask if it would be adapted to the players language.
	 * Names that are language independent most likely a stored in {@link #NAME}
	 * .
	 */
	int NAME = 3;
	/**
	 * A static serial number (unique among all of the same type).
	 *
	 * This is typically used for entities that describe game objects one would
	 * load from a data file. The file uses the CODE to identify a member of the
	 * type in other files.
	 */
	int CODE = 4;
}
